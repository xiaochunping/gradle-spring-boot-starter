plugins {
    id 'java'
    id 'maven-publish'
}

//设置动态属性
ext {
    //发布到仓库用户名
    publishUserName = "admin"
    //发布到仓库地址
    publishUserPassword = "admin123"
    //仓库地址
    publishURL="http://192.168.1.102:8081/nexus/repository/maven-snapshots/"
}

group 'com.study'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenLocal()    // 使用本地仓库
    mavenCentral()  // 使用中央仓库
}

dependencies {

    //compile : 依赖的包，编译并打包到最终的 jar 文件中。
    compile(
            "org.springframework.boot:spring-boot-starter:2.1.3.RELEASE",
            "org.springframework.boot:spring-boot-autoconfigure:2.1.3.RELEASE",
    )

    //compileOnly和provided效果是一样的，只在编译的时候有效，不参与打包
    compileOnly(
            "org.projectlombok:lombok:1.18.12",
    )

    //和compile一样，只是implementation不会产生传递依赖
    implementation(
            "org.springframework.boot:spring-boot-starter-web:2.1.3.RELEASE",
    )
    // 依赖的包只参与编译而不会打包到最终的 jar 文件中。
//    provider(
//    )
    // 适用于依赖的包只作用在运行时而不需要在编译时。
    //runtime()

    // 注解处理器 4.6 以上版本
    annotationProcessor(
            "org.springframework.boot:spring-boot-configuration-processor:2.1.3.RELEASE",
            "org.projectlombok:lombok:1.18.12",
    )
    // 注解处理器 Gradle 4.5 以下版本
//    compileOnly(
//            "org.springframework.boot:spring-boot-autoconfigure-processor:2.1.3.RELEASE"
//    )

}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

//maven-publish 扩展名
publishing {
    // 配置发布的项目信息
    publications {
        library(MavenPublication) {
            // MavenPublication 中有一些属性，主要包括groupId，artifactId，version,from,artifact
            // 其中groupId，artifactId，version，artifact都是选填的，不填默认去取项目的相关信息；
            //groupId project.group // 项目的group
            //artifactId 'test-'+project.name //项目name
            //version project.version
            //如果打成war包填写components.web，如果打成jar包填写components.java
            from components.java
            artifact sourceJar
        }
    }
    // 配置发布的地址
    repositories {
        // 一. 这种方式是最简便的方式
        mavenLocal()
        // 二. 或者使用自己配置本地路径，第一与第二使用一种就可以了
//        maven {
//            def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
//            url localMavenRepo
//        }
        // 三. 配置私库
        maven {
            // 私服地址
            url = publishURL
            // 验证信息
            credentials{
                // 私服的用户与密码
                username publishUserName
                password publishUserPassword
            }
        }
    }
}
